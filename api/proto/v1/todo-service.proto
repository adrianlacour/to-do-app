syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";

// ToDo represents a single task
message ToDo {
    int64 id = 1;
    string title = 2;
    string description = 3;
    // Date and time to remind the user of the todo task
    google.protobuf.Timestamp reminder = 4;
}

// CreateRequest represents request data to create new ToDo task
message CreateRequest{
    // API versioning
    string api = 1;
    ToDo toDo = 2;
}

// CreateResponse represents the response for the created ToDo task
message CreateResponse{
    string api = 1;

    // ID of the created task
    int64 id = 2;
}

// ReadRequest represents request data to read ToDo task
message ReadRequest{
    string api = 1;
    int64 id = 2;
}

// ReadResponse contains ToDo task data for specific ID
message ReadResponse{
    string api = 1;
    ToDo toDo = 2;
}

// UpdateRequest contains request data to update specified ToDo task
message UpdateRequest{
    string api = 1;
    ToDo toDo = 2;
}

// UpdateResponse contains status of update operation for specified ToDo task
message UpdateResponse{
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// DeleteRequest contains request data to delete ToDo task
message DeleteRequest{
    string api = 1;
    int64 id = 2;
}

// DeleteResponse contains status of delete operation
message DeleteResponse{
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

// ReadAllRequest request data to read all ToDo task
message ReadAllRequest{
    string api = 1;
}

// ReadAllResponse contains list of all ToDo tasks
message ReadAllResponse{
    string api = 1;

    // List of all todo tasks
    repeated ToDo toDos = 2;
}

// Service ToDoService to manage list of todo tasks
service ToDoService {
    // Create new ToDo task
    rpc Create(CreateRequest) returns (CreateResponse);

    // Read ToDo task
    rpc Read(ReadRequest) returns (ReadResponse);

    // Update ToDo task
    rpc Update(UpdateRequest) returns (UpdateResponse);

    // Delete ToDo task
    rpc Delete(DeleteRequest) returns (DeleteResponse);

    // Read all ToDo tasks
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse);
}
